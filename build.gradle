/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'antlr'


version = '1.16'
sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


publishing {
    publications {
        mavenJava(MavenPublication) {
        	groupId 'pipeline'
            artifactId 'pipeline'
            
            from components.java

            artifact sourceJar
            artifact packageJavadoc
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url = "$buildDir/repo"
        }
    }
}

javadoc {
  source = sourceSets.main.allJava
  classpath = configurations.compileClasspath

  options{
    setMemberLevel JavadocMemberLevel.PUBLIC
    setAuthor true

    links "https://docs.oracle.com/javase/7/docs/api/"
  }
}

task sourceJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allJava
}

task packageJavadoc(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

task cloneRepositoryBranch{
	doLast{
		exec{
			commandLine "rm"
			args = [ "-rf", "$buildDir/repo" ]
		}
		exec{
			commandLine "mkdir"
			args = [ "-p", "$buildDir/repo" ]
		}
		exec{
			commandLine "git"
			args = [ "clone", "-b" ,"repository", "git@github.com:Alagris/Pipeline.git", "$buildDir/repo" ]
		}
	}
}



task commitRepositoryBranch(){
	doLast{
		exec{
			workingDir "$buildDir/repo"
			commandLine "git"
			args = [ "add", "." ]
		}
		exec{
			workingDir "$buildDir/repo"
			commandLine "git"
			args = [ "commit" ,"-m", "Publishing $version" ]
		}
		exec{
			workingDir "$buildDir/repo"
			commandLine "git"
			args = [ "push", "origin", "repository" ]
		}
	}
}

task publishToGit(){
	dependsOn 'test'
	dependsOn 'cloneRepositoryBranch'
    dependsOn 'publish'
    dependsOn 'commitRepositoryBranch'
}

//publish.dependsOn cloneRepositoryBranch

//commitRepositoryBranch.dependsOn publish

dependencies {
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
	antlr "org.antlr:antlr4:4.7.1"
  	compile "org.antlr:antlr4-runtime:4.7.1"
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-visitor', '-package', 'net.alagris.parser']
    outputDirectory = new File("generated-src/antlr/main/net/alagris/parser".toString())
}

compileJava.dependsOn generateGrammarSource
sourceSets {
    generated {
        java.srcDir 'generated-src/antlr/main/'
    }
}

compileJava.source sourceSets.generated.java, sourceSets.main.java

clean{
    delete "generated-src"
}

